// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace VMSCore.API.EntityModels.Models
{
   
        public partial class EntityDataContextCore : DbContext
        {
            public EntityDataContextCore()
            {
            }

            public EntityDataContextCore(DbContextOptions<EntityDataContextCore> options)
                : base(options)
            {
            }
        public virtual DbSet<WEIGHT_CONNECT> WEIGHT_CONNECT { get; set; }
        public virtual DbSet<WEIGHT_DATA> WEIGHT_DATA { get; set; }
        public virtual DbSet<WEIGHT_ERROR> WEIGHT_ERROR { get; set; }
        public virtual DbSet<WEIGHT_STATUS> WEIGHT_STATUS { get; set; }
        public virtual DbSet<WEIGHT_WARNING> WEIGHT_WARNING { get; set; }
        public virtual DbSet<SECONDARY_PACKING_CONNECT> SECONDARY_PACKING_CONNECT { get; set; }
        public virtual DbSet<SECONDARY_PACKING_DATA> SECONDARY_PACKING_DATA { get; set; }
        public virtual DbSet<SECONDARY_PACKING_ERROR> SECONDARY_PACKING_ERROR { get; set; }
        public virtual DbSet<SECONDARY_PACKING_STATUS> SECONDARY_PACKING_STATUS { get; set; }
        public virtual DbSet<SECONDARY_PACKING_WARNING> SECONDARY_PACKING_WARNING { get; set; }
        public virtual DbSet<PRINT_MAKING_CONNECT> PRINT_MAKING_CONNECT { get; set; }
        public virtual DbSet<PRINT_MAKING_DATA> PRINT_MAKING_DATA { get; set; }
        public virtual DbSet<PRINT_MAKING_ERROR> PRINT_MAKING_ERROR { get; set; }
        public virtual DbSet<PRINT_MAKING_STATUS> PRINT_MAKING_STATUS { get; set; }
        public virtual DbSet<PRINT_MAKING_WARNING> PRINT_MAKING_WARNING { get; set; }
        public virtual DbSet<PRIMARY_PACKING_CONNECT> PRIMARY_PACKING_CONNECT { get; set; }
        public virtual DbSet<PRIMARY_PACKING_DATA> PRIMARY_PACKING_DATA { get; set; }
        public virtual DbSet<PRIMARY_PACKING_ERROR> PRIMARY_PACKING_ERROR { get; set; }
        public virtual DbSet<PRIMARY_PACKING_STATUS> PRIMARY_PACKING_STATUS { get; set; }
        public virtual DbSet<PRIMARY_PACKING_WARNING> PRIMARY_PACKING_WARNING { get; set; }
        public virtual DbSet<MACHINECOUNTER> MACHINECOUNTER { get; set; }
        public virtual DbSet<MACHINE_CONNECT> MACHINE_CONNECT { get; set; }
        public virtual DbSet<MACHINE_DATA> MACHINE_DATA { get; set; }
        public virtual DbSet<MACHINE_ERROR> MACHINE_ERROR { get; set; }
        public virtual DbSet<MACHINE_STATUS> MACHINE_STATUS { get; set; }
        public virtual DbSet<MACHINE_WARNING> MACHINE_WARNING { get; set; }
        public virtual DbSet<LABELING_RFID_CONNECT> LABELING_RFID_CONNECT { get; set; }
        public virtual DbSet<LABELING_RFID_DATA> LABELING_RFID_DATA { get; set; }
        public virtual DbSet<LABELING_RFID_ERROR> LABELING_RFID_ERROR { get; set; }
        public virtual DbSet<LABELING_RFID_STATUS> LABELING_RFID_STATUS { get; set; }
        public virtual DbSet<LABELING_RFID_WARNING> LABELING_RFID_WARNING { get; set; }
        public virtual DbSet<DETECTOR_CONNECT> DETECTOR_CONNECT { get; set; }
        public virtual DbSet<DETECTOR_DATA> DETECTOR_DATA { get; set; }
        public virtual DbSet<DETECTOR_ERROR> DETECTOR_ERROR { get; set; }
        public virtual DbSet<DETECTOR_STATUS> DETECTOR_STATUS { get; set; }
        public virtual DbSet<DETECTOR_WARNING> DETECTOR_WARNING { get; set; }
        public virtual DbSet<CAMERA_CONNECT> CAMERA_CONNECT { get; set; }
        public virtual DbSet<CAMERA_DATA> CAMERA_DATA { get; set; }
        public virtual DbSet<CAMERA_ERROR> CAMERA_ERROR { get; set; }
        public virtual DbSet<CAMERA_STATUS> CAMERA_STATUS { get; set; }
        public virtual DbSet<CAMERA_WARNING> CAMERA_WARNING { get; set; }
        public virtual DbSet<Account> Account { get; set; }
        public virtual DbSet<AccountGroupMapping> AccountGroupMapping { get; set; }
        public virtual DbSet<Barcode> Barcode { get; set; }
        public virtual DbSet<BarcodeConfig> BarcodeConfig { get; set; }
        public virtual DbSet<Button> Button { get; set; }
        public virtual DbSet<Company> Company { get; set; }
        public virtual DbSet<CompanyModuleMapping> CompanyModuleMapping { get; set; }
        public virtual DbSet<CompanyUserMapping> CompanyUserMapping { get; set; }
        public virtual DbSet<Contract> Contract { get; set; }
        public virtual DbSet<ContractFile> ContractFile { get; set; }
        public virtual DbSet<ContractPermission> ContractPermission { get; set; }
        public virtual DbSet<DataSetting> DataSetting { get; set; }
        public virtual DbSet<Department> Department { get; set; }
        public virtual DbSet<DepartmentStaff> DepartmentStaff { get; set; }
        public virtual DbSet<Device> Device { get; set; }
        public virtual DbSet<DeviceConnectHistory> DeviceConnectHistory { get; set; }
        public virtual DbSet<DeviceGroup> DeviceGroup { get; set; }
        public virtual DbSet<DeviceSession> DeviceSession { get; set; }
        public virtual DbSet<DeviceSessionDetail> DeviceSessionDetail { get; set; }
        public virtual DbSet<DeviceSessionDetail_Weighing> DeviceSessionDetail_Weighing { get; set; }
        public virtual DbSet<DistrictModel> DistrictModel { get; set; }
        public virtual DbSet<Equipment> Equipment { get; set; }
        public virtual DbSet<EquipmentGroup> EquipmentGroup { get; set; }
        public virtual DbSet<ErrorConfig> ErrorConfig { get; set; }
        public virtual DbSet<FinishedProduct> FinishedProduct { get; set; }
        public virtual DbSet<FunctionGroupModuleObjectMapping> FunctionGroupModuleObjectMapping { get; set; }
        public virtual DbSet<Line> Line { get; set; }
        public virtual DbSet<LineAccountMapping> LineAccountMapping { get; set; }
        public virtual DbSet<LineDevice> LineDevice { get; set; }
        public virtual DbSet<LineEquipmentMapping> LineEquipmentMapping { get; set; }
        public virtual DbSet<LineUserMapping> LineUserMapping { get; set; }
        public virtual DbSet<ManagementDevice> ManagementDevice { get; set; }
        public virtual DbSet<ManagementDeviceParam> ManagementDeviceParam { get; set; }
        public virtual DbSet<ManagementDeviceProtocol> ManagementDeviceProtocol { get; set; }
        public virtual DbSet<Material> Material { get; set; }
        public virtual DbSet<NotificationConfig> NotificationConfig { get; set; }
        public virtual DbSet<NotificationContact> NotificationContact { get; set; }
        public virtual DbSet<NotificationLine> NotificationLine { get; set; }
        public virtual DbSet<NotificationSystem> NotificationSystem { get; set; }
        public virtual DbSet<ObjectButtonMapping> ObjectButtonMapping { get; set; }
        public virtual DbSet<ObjectEntity> ObjectEntity { get; set; }
        public virtual DbSet<Permission> Permission { get; set; }
        public virtual DbSet<Plant> Plant { get; set; }
        public virtual DbSet<PlantUserMapping> PlantUserMapping { get; set; }
        public virtual DbSet<Product> Product { get; set; }
        public virtual DbSet<ProductGroup> ProductGroup { get; set; }
        public virtual DbSet<ProductType> ProductType { get; set; }
        public virtual DbSet<ProductionOrder> ProductionOrder { get; set; }
        public virtual DbSet<ProductionOrderDetail> ProductionOrderDetail { get; set; }
        public virtual DbSet<ProductionOrderDetailCode> ProductionOrderDetailCode { get; set; }
        public virtual DbSet<Protocol> Protocol { get; set; }
        public virtual DbSet<ProtocolParam> ProtocolParam { get; set; }
        public virtual DbSet<ProvinceModel> ProvinceModel { get; set; }
        public virtual DbSet<Role> Role { get; set; }
        public virtual DbSet<RoleDetaill> RoleDetaill { get; set; }
        public virtual DbSet<RoleObjectButtonMapping> RoleObjectButtonMapping { get; set; }
        public virtual DbSet<RoleUser> RoleUser { get; set; }
        public virtual DbSet<Shift> Shift { get; set; }
        public virtual DbSet<Skills> Skills { get; set; }
        public virtual DbSet<Staff> Staff { get; set; }
        public virtual DbSet<StaffAccountMapping> StaffAccountMapping { get; set; }
        public virtual DbSet<StaffSkill> StaffSkill { get; set; }
        public virtual DbSet<Stage> Stage { get; set; }
        public virtual DbSet<SwitchingUnit> SwitchingUnit { get; set; }
        public virtual DbSet<TypeDevice> TypeDevice { get; set; }
        public virtual DbSet<UserGroup> UserGroup { get; set; }
        public virtual DbSet<WardModel> WardModel { get; set; }
        public virtual DbSet<WorkShop> WorkShop { get; set; }
        public virtual DbSet<WorkshopUserMapping> WorkshopUserMapping { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Account>(entity =>
            {
                entity.Property(e => e.AccountId).HasMaxLength(50);

                entity.Property(e => e.AccountName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.AccountPassword)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.AccountPasswordSha)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("AccountPasswordSHA");
            });

            modelBuilder.Entity<AccountGroupMapping>(entity =>
            {
                entity.HasKey(e => new { e.AccountId, e.UserGroupId, e.AccountGroupMappingId });

                entity.Property(e => e.AccountId).HasMaxLength(50);

                entity.Property(e => e.UserGroupId).HasMaxLength(50);

                entity.Property(e => e.AccountGroupMappingId).HasMaxLength(50);
            });

            modelBuilder.Entity<Barcode>(entity =>
            {
                entity.Property(e => e.Id).HasMaxLength(50);

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.CrationTime).HasColumnType("datetime");

                entity.Property(e => e.CreatorId).HasMaxLength(50);

                entity.Property(e => e.LastModiferId).HasMaxLength(50);

                entity.Property(e => e.LastModificationTime).HasColumnType("datetime");

                entity.Property(e => e.LogDate).HasColumnType("datetime");

                entity.Property(e => e.Name).HasMaxLength(200);

                entity.Property(e => e.StringFormat).HasMaxLength(50);
            });

            modelBuilder.Entity<BarcodeConfig>(entity =>
            {
                entity.Property(e => e.Id).HasMaxLength(50);

                entity.Property(e => e.BarCodeId).HasMaxLength(50);

                entity.Property(e => e.CreationTime).HasColumnType("datetime");

                entity.Property(e => e.CreatorId).HasMaxLength(50);

                entity.Property(e => e.DataType).HasMaxLength(200);

                entity.Property(e => e.DataValue).HasMaxLength(200);

                entity.Property(e => e.LastModificationTime).HasColumnType("datetime");

                entity.Property(e => e.LastModifierId).HasMaxLength(50);

                entity.Property(e => e.LogDate).HasColumnType("datetime");

                entity.Property(e => e.ParamName).HasMaxLength(200);
            });

            modelBuilder.Entity<Button>(entity =>
            {
                entity.Property(e => e.Id).HasMaxLength(50);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ButtonNameEn).HasMaxLength(100);
            });

            modelBuilder.Entity<Company>(entity =>
            {
                entity.Property(e => e.Id).HasMaxLength(50);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.CompanyCodeNameEn).HasMaxLength(100);

                entity.Property(e => e.CompanyTax).HasMaxLength(100);

                entity.Property(e => e.CreationTime).HasColumnType("datetime");

                entity.Property(e => e.CreatorId).HasMaxLength(100);

                entity.Property(e => e.LastModificationTime).HasColumnType("datetime");

                entity.Property(e => e.LastModifierId).HasMaxLength(100);

                entity.Property(e => e.LogDate).HasColumnType("datetime");

                entity.Property(e => e.Name).HasMaxLength(100);
            });

            modelBuilder.Entity<CompanyModuleMapping>(entity =>
            {
                entity.HasKey(e => new { e.CompanyModuleMappingId, e.CompanyCode, e.ModuleId });

                entity.Property(e => e.CompanyModuleMappingId).HasMaxLength(50);

                entity.Property(e => e.CompanyCode).HasMaxLength(50);

                entity.Property(e => e.ModuleId).HasMaxLength(50);
            });

            modelBuilder.Entity<CompanyUserMapping>(entity =>
            {
                entity.HasKey(e => new { e.CompanyId, e.StaffId });

                entity.Property(e => e.CompanyId).HasMaxLength(50);

                entity.Property(e => e.StaffId).HasMaxLength(50);

                entity.Property(e => e.ModuleId).HasMaxLength(50);
            });

            modelBuilder.Entity<Contract>(entity =>
            {
                entity.Property(e => e.Id).HasMaxLength(50);

                entity.Property(e => e.Code).HasMaxLength(200);

                entity.Property(e => e.Company).HasMaxLength(50);

                entity.Property(e => e.CreationTime).HasColumnType("datetime");

                entity.Property(e => e.CreatorId).HasMaxLength(50);

                entity.Property(e => e.FromDate).HasColumnType("datetime");

                entity.Property(e => e.LastModificationTime).HasColumnType("datetime");

                entity.Property(e => e.LastModifierId).HasMaxLength(50);

                entity.Property(e => e.LogDate).HasColumnType("datetime");

                entity.Property(e => e.Name).HasMaxLength(200);

                entity.Property(e => e.PaymentTypetime).HasMaxLength(200);

                entity.Property(e => e.ToDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ContractFile>(entity =>
            {
                entity.Property(e => e.Id).HasMaxLength(50);

                entity.Property(e => e.ContactId).HasMaxLength(50);

                entity.Property(e => e.Creationtime).HasColumnType("datetime");

                entity.Property(e => e.LastModificationTime).HasColumnType("datetime");

                entity.Property(e => e.LastModifierId).HasMaxLength(50);

                entity.Property(e => e.LogDate).HasColumnType("datetime");

                entity.Property(e => e.Name).HasMaxLength(200);
            });

            modelBuilder.Entity<ContractPermission>(entity =>
            {
                entity.Property(e => e.Id).HasMaxLength(50);

                entity.Property(e => e.ContactId).HasMaxLength(50);

                entity.Property(e => e.CreationTime).HasColumnType("datetime");

                entity.Property(e => e.CreatorId).HasMaxLength(50);

                entity.Property(e => e.LastModificationTime).HasColumnType("datetime");

                entity.Property(e => e.LastModifierId).HasMaxLength(50);

                entity.Property(e => e.LogDate).HasColumnType("datetime");

                entity.Property(e => e.PermissonId).HasMaxLength(50);
            });

            modelBuilder.Entity<DataSetting>(entity =>
            {
                entity.Property(e => e.Id).HasMaxLength(50);

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.CreationTime).HasColumnType("datetime");

                entity.Property(e => e.CreatorId).HasMaxLength(50);

                entity.Property(e => e.Description).HasMaxLength(4000);

                entity.Property(e => e.GroupName).HasMaxLength(200);

                entity.Property(e => e.LastModificationTime).HasColumnType("datetime");

                entity.Property(e => e.LastModifierId).HasMaxLength(50);

                entity.Property(e => e.LogDate).HasColumnType("datetime");

                entity.Property(e => e.Name).HasMaxLength(200);
            });

            modelBuilder.Entity<Department>(entity =>
            {
                entity.Property(e => e.Id).HasMaxLength(50);

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.CompanyId)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreationTime).HasColumnType("datetime");

                entity.Property(e => e.CreatorId).HasMaxLength(50);

                entity.Property(e => e.LastModificationTime).HasColumnType("datetime");

                entity.Property(e => e.LastModifierId).HasMaxLength(50);

                entity.Property(e => e.LogDate).HasColumnType("datetime");

                entity.Property(e => e.Name).HasMaxLength(100);
            });

            modelBuilder.Entity<DepartmentStaff>(entity =>
            {
                entity.Property(e => e.Id).HasMaxLength(50);

                entity.Property(e => e.CreatorId).HasMaxLength(50);

                entity.Property(e => e.LastModifierId).HasMaxLength(50);

                entity.Property(e => e.LogDate).HasColumnType("datetime");

                entity.Property(e => e.PositionId).HasMaxLength(50);

                entity.Property(e => e.StaffId).HasMaxLength(50);
            });

            modelBuilder.Entity<Device>(entity =>
            {
                entity.Property(e => e.Id).HasMaxLength(50);

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.CompanyId).HasMaxLength(50);

                entity.Property(e => e.CreationTime).HasColumnType("datetime");

                entity.Property(e => e.CreatorId).HasMaxLength(50);

                entity.Property(e => e.Description).HasMaxLength(4000);

                entity.Property(e => e.LastModificationTime).HasColumnType("datetime");

                entity.Property(e => e.LastModifierId).HasMaxLength(50);

                entity.Property(e => e.LineId).HasMaxLength(50);

                entity.Property(e => e.LogDate).HasColumnType("datetime");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.TypeDriveId).HasMaxLength(100);

                entity.Property(e => e.UnitTypeDriveId).HasMaxLength(100);
            });

            modelBuilder.Entity<DeviceConnectHistory>(entity =>
            {
                entity.Property(e => e.Id).HasMaxLength(50);

                entity.Property(e => e.CreationTime).HasColumnType("datetime");

                entity.Property(e => e.CreatorId).HasMaxLength(50);

                entity.Property(e => e.DeviceGroup).HasMaxLength(50);

                entity.Property(e => e.DeviceId).HasMaxLength(50);

                entity.Property(e => e.DeviceType).HasMaxLength(50);

                entity.Property(e => e.FromDate).HasMaxLength(50);

                entity.Property(e => e.KeyDate).HasMaxLength(200);

                entity.Property(e => e.KeyTime).HasMaxLength(200);

                entity.Property(e => e.LastModificationTime).HasColumnType("datetime");

                entity.Property(e => e.LastModifierId).HasMaxLength(50);

                entity.Property(e => e.LogDate).HasColumnType("datetime");

                entity.Property(e => e.ToDate).HasMaxLength(50);
            });

            modelBuilder.Entity<DeviceGroup>(entity =>
            {
                entity.Property(e => e.Id).HasMaxLength(50);

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.CompanyId).HasMaxLength(50);

                entity.Property(e => e.CreationTime).HasColumnType("datetime");

                entity.Property(e => e.CreatorId).HasMaxLength(50);

                entity.Property(e => e.Description).HasMaxLength(400);

                entity.Property(e => e.LastModificationTime).HasColumnType("datetime");

                entity.Property(e => e.LastModifierId).HasMaxLength(50);

                entity.Property(e => e.LogDate).HasColumnType("datetime");

                entity.Property(e => e.Name).HasMaxLength(100);
            });

            modelBuilder.Entity<DeviceSession>(entity =>
            {
                entity.Property(e => e.Id).HasMaxLength(50);

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.CompanyId).HasMaxLength(50);

                entity.Property(e => e.CreationTime).HasColumnType("datetime");

                entity.Property(e => e.CreatorId).HasMaxLength(50);

                entity.Property(e => e.DeviceId).HasMaxLength(50);

                entity.Property(e => e.FromDate).HasMaxLength(200);

                entity.Property(e => e.LastModificationTime).HasColumnType("datetime");

                entity.Property(e => e.LastModifierId).HasMaxLength(50);

                entity.Property(e => e.LogDate).HasColumnType("datetime");

                entity.Property(e => e.Quantity).HasMaxLength(50);

                entity.Property(e => e.ToDate).HasMaxLength(200);
            });

            modelBuilder.Entity<DeviceSessionDetail>(entity =>
            {
                entity.Property(e => e.Id).HasMaxLength(50);

                entity.Property(e => e.CodePrint).HasMaxLength(200);

                entity.Property(e => e.CreationTime).HasColumnType("datetime");

                entity.Property(e => e.CreatorId).HasMaxLength(50);

                entity.Property(e => e.DeviceId).HasMaxLength(50);

                entity.Property(e => e.DeviceSessionId).HasMaxLength(50);

                entity.Property(e => e.LastModificationTime).HasColumnType("datetime");

                entity.Property(e => e.LastModifierId).HasMaxLength(50);

                entity.Property(e => e.LogDate).HasColumnType("datetime");

                entity.Property(e => e.Quantity).HasMaxLength(50);

                entity.Property(e => e.QuantityBinary).HasMaxLength(4000);

                entity.Property(e => e.QuantityHex).HasMaxLength(4000);

                entity.Property(e => e.Sorted).HasMaxLength(50);
            });

            modelBuilder.Entity<DeviceSessionDetail_Weighing>(entity =>
            {
                entity.ToTable("DeviceSessionDetail_Weighing");

                entity.Property(e => e.Id).HasMaxLength(50);

                entity.Property(e => e.CodePrint).HasMaxLength(50);

                entity.Property(e => e.CreationTime).HasColumnType("datetime");

                entity.Property(e => e.CreatorId).HasMaxLength(50);

                entity.Property(e => e.DeviceId).HasMaxLength(50);

                entity.Property(e => e.DeviceSessionId).HasMaxLength(50);

                entity.Property(e => e.DeviceType).HasMaxLength(50);

                entity.Property(e => e.LastModificationTime).HasColumnType("datetime");

                entity.Property(e => e.LastModifierId).HasMaxLength(50);

                entity.Property(e => e.LogDate).HasColumnType("datetime");

                entity.Property(e => e.OverData).HasMaxLength(4000);

                entity.Property(e => e.ProductId).HasMaxLength(50);

                entity.Property(e => e.ProductOrder).HasMaxLength(200);

                entity.Property(e => e.Quantity).HasMaxLength(50);

                entity.Property(e => e.QuantityBinarty).HasMaxLength(4000);

                entity.Property(e => e.QuantityHex).HasMaxLength(4000);

                entity.Property(e => e.ReferData).HasMaxLength(4000);

                entity.Property(e => e.Sorted).HasMaxLength(50);

                entity.Property(e => e.StatusWt)
                    .HasMaxLength(50)
                    .HasColumnName("StatusWT");

                entity.Property(e => e.UnderData).HasMaxLength(4000);
            });

            modelBuilder.Entity<DistrictModel>(entity =>
            {
                entity.HasKey(e => e.DistrictId);

                entity.Property(e => e.DistrictId).ValueGeneratedNever();

                entity.Property(e => e.Appellation)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DistrictCode).HasMaxLength(50);

                entity.Property(e => e.DistrictName)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.RegisterVat)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("RegisterVAT");

                entity.Property(e => e.VehicleRegistrationSignature).HasMaxLength(200);

                entity.HasOne(d => d.Province)
                    .WithMany(p => p.DistrictModel)
                    .HasForeignKey(d => d.ProvinceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DistrictModel_ProvinceModel");
            });

            modelBuilder.Entity<Equipment>(entity =>
            {
                entity.Property(e => e.EquipmentId).HasMaxLength(50);

                entity.Property(e => e.EquipmentGroupId)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.EquipmentName).HasMaxLength(100);

                entity.Property(e => e.PlantId)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<EquipmentGroup>(entity =>
            {
                entity.Property(e => e.EquipmentGroupId).HasMaxLength(50);

                entity.Property(e => e.CompanyCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.EquipmentGroupName).HasMaxLength(100);
            });

            modelBuilder.Entity<ErrorConfig>(entity =>
            {
                entity.Property(e => e.Id).HasMaxLength(50);

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.CodeBinary).HasMaxLength(4000);

                entity.Property(e => e.CodeHex).HasMaxLength(4000);

                entity.Property(e => e.CreationTime).HasColumnType("datetime");

                entity.Property(e => e.CreatorId).HasMaxLength(50);

                entity.Property(e => e.LastModiferId).HasMaxLength(50);

                entity.Property(e => e.LastModificationTime).HasColumnType("datetime");

                entity.Property(e => e.LogDate).HasColumnType("datetime");

                entity.Property(e => e.Name).HasMaxLength(200);

                entity.Property(e => e.UnitTyeDriveId).HasMaxLength(50);
            });

            modelBuilder.Entity<FinishedProduct>(entity =>
            {
                entity.Property(e => e.Id).HasMaxLength(50);

                entity.Property(e => e.Code).HasMaxLength(200);

                entity.Property(e => e.CreationTime).HasColumnType("datetime");

                entity.Property(e => e.CreatorId).HasMaxLength(50);

                entity.Property(e => e.LastModificationTime).HasColumnType("datetime");

                entity.Property(e => e.LastModifierId).HasMaxLength(50);

                entity.Property(e => e.LogDate).HasColumnType("datetime");

                entity.Property(e => e.Name).HasMaxLength(200);

                entity.Property(e => e.Number).HasMaxLength(200);

                entity.Property(e => e.Unit).HasMaxLength(200);

                entity.Property(e => e.UnitType).HasMaxLength(200);
            });

            modelBuilder.Entity<FunctionGroupModuleObjectMapping>(entity =>
            {
                entity.Property(e => e.FunctionGroupModuleObjectMappingId).HasMaxLength(50);

                entity.Property(e => e.GroupType).HasMaxLength(100);

                entity.Property(e => e.ModuleType).HasMaxLength(100);

                entity.Property(e => e.ObjectId)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Owner).HasMaxLength(50);

                entity.Property(e => e.ParentId).HasMaxLength(50);
            });

            modelBuilder.Entity<Line>(entity =>
            {
                entity.Property(e => e.Id).HasMaxLength(50);

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.CompanyId).HasMaxLength(50);

                entity.Property(e => e.CreationTime).HasColumnType("datetime");

                entity.Property(e => e.CreatorId).HasMaxLength(50);

                entity.Property(e => e.LastModificationTime).HasColumnType("datetime");

                entity.Property(e => e.LastModifierId).HasColumnType("datetime");

                entity.Property(e => e.LogDate).HasColumnType("datetime");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.PlantId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.WorkshopId)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<LineAccountMapping>(entity =>
            {
                entity.HasKey(e => new { e.LineId, e.AccountId, e.LineAccountMappingId });

                entity.Property(e => e.LineId).HasMaxLength(50);

                entity.Property(e => e.AccountId).HasMaxLength(50);

                entity.Property(e => e.LineAccountMappingId).HasMaxLength(50);
            });

            modelBuilder.Entity<LineDevice>(entity =>
            {
                entity.Property(e => e.Id).HasMaxLength(50);

                entity.Property(e => e.CreationTime).HasColumnType("datetime");

                entity.Property(e => e.CreatorId).HasMaxLength(50);

                entity.Property(e => e.Description).HasMaxLength(4000);

                entity.Property(e => e.DeviceId).HasMaxLength(50);

                entity.Property(e => e.LastModificationTime).HasColumnType("datetime");

                entity.Property(e => e.LastModifierId).HasColumnType("datetime");

                entity.Property(e => e.LineId).HasMaxLength(50);

                entity.Property(e => e.LogDate).HasColumnType("datetime");

                entity.Property(e => e.StageId).HasMaxLength(50);

                entity.Property(e => e.WorkshopId).HasMaxLength(50);
            });

            modelBuilder.Entity<LineEquipmentMapping>(entity =>
            {
                entity.HasKey(e => new { e.LineId, e.EquipmentId });

                entity.Property(e => e.LineId).HasMaxLength(50);

                entity.Property(e => e.EquipmentId).HasMaxLength(50);
            });

            modelBuilder.Entity<LineUserMapping>(entity =>
            {
                entity.HasKey(e => new { e.LineId, e.StaffId });

                entity.Property(e => e.LineId).HasMaxLength(50);

                entity.Property(e => e.StaffId).HasMaxLength(50);

                entity.Property(e => e.ModuleId).HasMaxLength(50);
            });

            modelBuilder.Entity<ManagementDevice>(entity =>
            {
                entity.Property(e => e.Id).HasMaxLength(50);

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.CompanyId).HasMaxLength(50);

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.CreatorId).HasMaxLength(50);

                entity.Property(e => e.Description).HasMaxLength(4000);

                entity.Property(e => e.LastModificationTime).HasColumnType("datetime");

                entity.Property(e => e.LastModifierId).HasMaxLength(50);

                entity.Property(e => e.LogDate).HasColumnType("datetime");

                entity.Property(e => e.Name).HasMaxLength(4000);
            });

            modelBuilder.Entity<ManagementDeviceParam>(entity =>
            {
                entity.Property(e => e.Id).HasMaxLength(50);

                entity.Property(e => e.CreationTime).HasColumnType("datetime");

                entity.Property(e => e.CreatorId).HasMaxLength(50);

                entity.Property(e => e.DataType).HasMaxLength(4000);

                entity.Property(e => e.DriveManagerId).HasMaxLength(50);

                entity.Property(e => e.LastModificationTime).HasColumnType("datetime");

                entity.Property(e => e.LastModifierId).HasMaxLength(50);

                entity.Property(e => e.LogDate).HasColumnType("datetime");

                entity.Property(e => e.ProtocolId).HasMaxLength(50);

                entity.Property(e => e.ValueData).HasMaxLength(4000);
            });

            modelBuilder.Entity<ManagementDeviceProtocol>(entity =>
            {
                entity.Property(e => e.Id).HasMaxLength(50);

                entity.Property(e => e.CreationTime).HasColumnType("datetime");

                entity.Property(e => e.CreatorId).HasMaxLength(50);

                entity.Property(e => e.IdDriveManager).HasMaxLength(50);

                entity.Property(e => e.IdProtocol).HasMaxLength(50);

                entity.Property(e => e.LastModificationtime).HasColumnType("datetime");

                entity.Property(e => e.LastModifierId).HasMaxLength(50);

                entity.Property(e => e.LogDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<Material>(entity =>
            {
                entity.Property(e => e.Id).HasMaxLength(50);

                entity.Property(e => e.Code).HasMaxLength(200);

                entity.Property(e => e.CreationTime).HasColumnType("datetime");

                entity.Property(e => e.CreatorId).HasMaxLength(50);

                entity.Property(e => e.LastModificationTime).HasColumnType("datetime");

                entity.Property(e => e.LastModifierId).HasMaxLength(50);

                entity.Property(e => e.LineId).HasMaxLength(50);

                entity.Property(e => e.LogDate).HasColumnType("datetime");

                entity.Property(e => e.Name).HasMaxLength(200);

                entity.Property(e => e.Skupackaging)
                    .HasMaxLength(200)
                    .HasColumnName("SKUPackaging");

                entity.Property(e => e.Unit).HasMaxLength(200);

                entity.Property(e => e.UnitType).HasMaxLength(200);
            });

            modelBuilder.Entity<NotificationConfig>(entity =>
            {
                entity.Property(e => e.Id).HasMaxLength(50);

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.CreationTime).HasColumnType("datetime");

                entity.Property(e => e.CreatorId).HasMaxLength(50);

                entity.Property(e => e.Lang).HasMaxLength(50);

                entity.Property(e => e.LastModificationTime).HasColumnType("datetime");

                entity.Property(e => e.LastModifierId).HasMaxLength(50);

                entity.Property(e => e.LogDate).HasColumnType("datetime");

                entity.Property(e => e.NotiConfigContent).HasMaxLength(4000);
            });

            modelBuilder.Entity<NotificationContact>(entity =>
            {
                entity.Property(e => e.Id).HasMaxLength(50);

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.CreationTime).HasColumnType("datetime");

                entity.Property(e => e.CreatorId).HasMaxLength(50);

                entity.Property(e => e.Lang).HasMaxLength(50);

                entity.Property(e => e.LastModificationTime).HasColumnType("datetime");

                entity.Property(e => e.LastModifierId).HasMaxLength(50);

                entity.Property(e => e.LogDate).HasColumnType("datetime");

                entity.Property(e => e.NotiContactContent).HasMaxLength(4000);
            });

            modelBuilder.Entity<NotificationLine>(entity =>
            {
                entity.Property(e => e.Id).HasMaxLength(50);

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.CrationTime).HasColumnType("datetime");

                entity.Property(e => e.CreatorId).HasMaxLength(50);

                entity.Property(e => e.IdDrive).HasMaxLength(50);

                entity.Property(e => e.IdLine).HasMaxLength(50);

                entity.Property(e => e.Lang).HasMaxLength(50);

                entity.Property(e => e.LastModificationTime).HasColumnType("datetime");

                entity.Property(e => e.LastModifierId).HasMaxLength(50);

                entity.Property(e => e.LogDate).HasColumnType("datetime");

                entity.Property(e => e.NotiLineContent).HasMaxLength(4000);
            });

            modelBuilder.Entity<NotificationSystem>(entity =>
            {
                entity.Property(e => e.Id).HasMaxLength(50);

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.CreationTime).HasColumnType("datetime");

                entity.Property(e => e.CreatorId).HasMaxLength(50);

                entity.Property(e => e.DateNotification).HasMaxLength(200);

                entity.Property(e => e.LastModificationTime).HasColumnType("datetime");

                entity.Property(e => e.LastModifierId).HasMaxLength(50);

                entity.Property(e => e.LogDate).HasColumnType("datetime");

                entity.Property(e => e.NotiContent).HasMaxLength(4000);
            });

            modelBuilder.Entity<ObjectButtonMapping>(entity =>
            {
                entity.HasKey(e => new { e.ObjectButtonMappingId, e.ObjectId, e.ButtonId });

                entity.Property(e => e.ObjectButtonMappingId).HasMaxLength(50);

                entity.Property(e => e.ObjectId).HasMaxLength(50);

                entity.Property(e => e.ButtonId).HasMaxLength(50);
            });

            modelBuilder.Entity<ObjectEntity>(entity =>
            {
                entity.HasKey(e => e.ObjectId)
                    .HasName("PK_Object");

                entity.Property(e => e.ObjectId).HasMaxLength(50);

                entity.Property(e => e.ObjectName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ObjectNameEn).HasMaxLength(100);
            });

            modelBuilder.Entity<Permission>(entity =>
            {
                entity.Property(e => e.Id).HasMaxLength(50);

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.CreationTime).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(4000);

                entity.Property(e => e.LastModificationTime).HasColumnType("datetime");

                entity.Property(e => e.Name).HasMaxLength(200);
            });

            modelBuilder.Entity<Plant>(entity =>
            {
                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('00000000-0000-0000-0000-000000000000')");

                entity.Property(e => e.CompanyId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('0000-0000-0000-0000')");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.NameEn).HasMaxLength(100);
            });

            modelBuilder.Entity<PlantUserMapping>(entity =>
            {
                entity.HasKey(e => new { e.PlantId, e.StaffId });

                entity.Property(e => e.PlantId).HasMaxLength(50);

                entity.Property(e => e.StaffId).HasMaxLength(50);

                entity.Property(e => e.MduleId).HasMaxLength(50);
            });

            modelBuilder.Entity<Product>(entity =>
            {
                entity.Property(e => e.Id).HasMaxLength(50);

                entity.Property(e => e.Code).HasMaxLength(100);

                entity.Property(e => e.ConversionUnit).HasMaxLength(50);

                entity.Property(e => e.CreationTime).HasColumnType("datetime");

                entity.Property(e => e.CreatorId).HasMaxLength(50);

                entity.Property(e => e.LastModificationId).HasMaxLength(50);

                entity.Property(e => e.LastModificationTime).HasColumnType("datetime");

                entity.Property(e => e.LogDate).HasColumnType("datetime");

                entity.Property(e => e.ModelId).HasMaxLength(50);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ProductGroupId).HasMaxLength(50);

                entity.Property(e => e.ProductTypeId).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasMaxLength(50);

                entity.Property(e => e.UnitId).HasMaxLength(50);

                entity.Property(e => e.UnitTypeId).HasMaxLength(50);
            });

            modelBuilder.Entity<ProductGroup>(entity =>
            {
                entity.Property(e => e.Id).HasMaxLength(50);

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.CreationTime).HasColumnType("datetime");

                entity.Property(e => e.CreatorId).HasMaxLength(50);

                entity.Property(e => e.Description).HasMaxLength(4000);

                entity.Property(e => e.LastModificationTime).HasColumnType("datetime");

                entity.Property(e => e.LastModifierId).HasMaxLength(50);

                entity.Property(e => e.LogDate).HasColumnType("datetime");

                entity.Property(e => e.Name).HasMaxLength(200);
            });

            modelBuilder.Entity<ProductType>(entity =>
            {
                entity.Property(e => e.Id).HasMaxLength(50);

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.CreationTime).HasColumnType("datetime");

                entity.Property(e => e.CreatorId).HasMaxLength(50);

                entity.Property(e => e.Description).HasMaxLength(4000);

                entity.Property(e => e.LastModificationTime).HasColumnType("datetime");

                entity.Property(e => e.LastModifierId).HasMaxLength(50);

                entity.Property(e => e.LogDate).HasColumnType("datetime");

                entity.Property(e => e.Name).HasMaxLength(200);
            });

            modelBuilder.Entity<ProductionOrder>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("(newid())");

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.CompanyId).HasMaxLength(50);

                entity.Property(e => e.CreationTime).HasColumnType("datetime");

                entity.Property(e => e.CreatorId).HasMaxLength(50);

                entity.Property(e => e.ExpireDate).HasColumnType("datetime");

                entity.Property(e => e.FromDate).HasMaxLength(100);

                //entity.Property(e => e.LastModiferId).HasMaxLength(50);

                entity.Property(e => e.LastModificationTime).HasColumnType("datetime");

                entity.Property(e => e.LineId).HasMaxLength(50);

                entity.Property(e => e.LogDate).HasColumnType("datetime");

                entity.Property(e => e.Lot).HasMaxLength(200);

                entity.Property(e => e.ManufactureDate).HasColumnType("datetime");

                entity.Property(e => e.NumberTemp).HasMaxLength(50);

                entity.Property(e => e.OrderString).HasMaxLength(100);

                entity.Property(e => e.ProductionOrderCode).HasMaxLength(50);

                entity.Property(e => e.Reason).HasMaxLength(200);

                entity.Property(e => e.StaffId).HasMaxLength(50);

                entity.Property(e => e.StockId).HasMaxLength(100);

                entity.Property(e => e.ToDate).HasMaxLength(100);
            });

            modelBuilder.Entity<ProductionOrderDetail>(entity =>
            {
                entity.Property(e => e.Id).HasMaxLength(50);

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.ComanyId).HasMaxLength(50);

                entity.Property(e => e.CreationTime).HasColumnType("datetime");

                entity.Property(e => e.CreatorId).HasMaxLength(50);

                entity.Property(e => e.DepartmentId).HasMaxLength(50);

                entity.Property(e => e.LastModificationtime).HasColumnType("datetime");

                entity.Property(e => e.LastModifierId).HasMaxLength(50);

                entity.Property(e => e.LineId).HasMaxLength(50);

                entity.Property(e => e.LogDate).HasColumnType("datetime");

                entity.Property(e => e.LotNumber).HasMaxLength(50);

                entity.Property(e => e.ModelId).HasMaxLength(50);

                entity.Property(e => e.Note1).HasMaxLength(4000);

                entity.Property(e => e.Note2).HasMaxLength(4000);

                entity.Property(e => e.Note3).HasMaxLength(4000);

                entity.Property(e => e.NumberTemp).HasMaxLength(50);

                entity.Property(e => e.ProductId).HasMaxLength(50);

                entity.Property(e => e.ProductName).HasMaxLength(100);

                entity.Property(e => e.ProductionOrderId).HasMaxLength(50);

                entity.Property(e => e.StockId).HasMaxLength(50);

                entity.Property(e => e.Unit).HasMaxLength(50);
            });

            modelBuilder.Entity<ProductionOrderDetailCode>(entity =>
            {
                entity.Property(e => e.Id).HasMaxLength(50);

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.Code1).HasMaxLength(50);

                entity.Property(e => e.Code2).HasMaxLength(50);

                entity.Property(e => e.CreationTime).HasColumnType("datetime");

                entity.Property(e => e.CreatorId).HasMaxLength(50);

                entity.Property(e => e.IdLine).HasMaxLength(50);

                entity.Property(e => e.LastModificationTime).HasColumnType("datetime");

                entity.Property(e => e.LastModifierId).HasMaxLength(50);

                entity.Property(e => e.LogDate).HasColumnType("datetime");

                entity.Property(e => e.ToDate).HasMaxLength(100);
            });

            modelBuilder.Entity<Protocol>(entity =>
            {
                entity.Property(e => e.Id).HasMaxLength(50);

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.CompanyId).HasMaxLength(50);

                entity.Property(e => e.CreationTime).HasColumnType("datetime");

                entity.Property(e => e.CreatorId).HasMaxLength(50);

                entity.Property(e => e.Description).HasMaxLength(4000);

                entity.Property(e => e.LastModificationTime).HasColumnType("datetime");

                entity.Property(e => e.LastModifierId).HasMaxLength(50);

                entity.Property(e => e.LogDate).HasColumnType("datetime");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.ProtocolType).HasMaxLength(50);
            });

            modelBuilder.Entity<ProtocolParam>(entity =>
            {
                entity.Property(e => e.Id).HasMaxLength(50);

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.CreationTime).HasColumnType("datetime");

                entity.Property(e => e.CreatorId).HasMaxLength(50);

                entity.Property(e => e.DataType).HasMaxLength(1000);

                entity.Property(e => e.Description).HasMaxLength(1000);

                entity.Property(e => e.LastModificationTime).HasColumnType("datetime");

                entity.Property(e => e.LastModifierId).HasMaxLength(50);

                entity.Property(e => e.LogDate).HasColumnType("datetime");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.ProtocolId).HasMaxLength(50);
            });

            modelBuilder.Entity<ProvinceModel>(entity =>
            {
                entity.HasKey(e => e.ProvinceId);

                entity.Property(e => e.ProvinceId).ValueGeneratedNever();

                entity.Property(e => e.ConfigPriceCode).HasMaxLength(200);

                entity.Property(e => e.ProvinceCode).HasMaxLength(50);

                entity.Property(e => e.ProvinceName)
                    .IsRequired()
                    .HasMaxLength(200);
            });

            modelBuilder.Entity<Role>(entity =>
            {
                entity.Property(e => e.Id).HasMaxLength(50);

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.CompanyId).HasMaxLength(50);

                entity.Property(e => e.CreationTime).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(4000);

                entity.Property(e => e.LastModificationTime).HasColumnType("datetime");

                entity.Property(e => e.Name).HasMaxLength(200);
            });

            modelBuilder.Entity<RoleDetaill>(entity =>
            {
                entity.Property(e => e.Id).HasMaxLength(50);

                entity.Property(e => e.CreationTime).HasColumnType("datetime");

                entity.Property(e => e.LastModificationTime).HasColumnType("datetime");

                entity.Property(e => e.PermissionId).HasMaxLength(50);

                entity.Property(e => e.RoleId).HasMaxLength(50);

                entity.Property(e => e.UserName).HasMaxLength(200);
            });

            modelBuilder.Entity<RoleObjectButtonMapping>(entity =>
            {
                entity.HasKey(e => new { e.ObjectId, e.ButtonId, e.RoleId });

                entity.Property(e => e.ObjectId).HasMaxLength(50);

                entity.Property(e => e.ButtonId).HasMaxLength(50);

                entity.Property(e => e.RoleId).HasMaxLength(50);
            });

            modelBuilder.Entity<RoleUser>(entity =>
            {
                entity.Property(e => e.Id).HasMaxLength(50);

                entity.Property(e => e.CreationTime).HasColumnType("datetime");

                entity.Property(e => e.LastModificationtime).HasColumnType("datetime");

                entity.Property(e => e.RoleId).HasMaxLength(50);

                entity.Property(e => e.UserId).HasMaxLength(50);

                entity.Property(e => e.UserName).HasMaxLength(200);
            });

            modelBuilder.Entity<Shift>(entity =>
            {
                entity.Property(e => e.Id).HasMaxLength(50);

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.CreationTime).HasColumnType("datetime");

                entity.Property(e => e.CreatorId).HasMaxLength(50);

                entity.Property(e => e.Description).HasMaxLength(100);

                entity.Property(e => e.FromTime).HasColumnType("datetime");

                entity.Property(e => e.LastModificationTime).HasColumnType("datetime");

                entity.Property(e => e.LastModifierId).HasMaxLength(50);

                entity.Property(e => e.LogDate).HasColumnType("datetime");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.ToTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<Skills>(entity =>
            {
                entity.Property(e => e.Id).HasMaxLength(50);

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.CompanyId).HasMaxLength(50);

                entity.Property(e => e.CreationTime).HasColumnType("datetime");

                entity.Property(e => e.CreatorId).HasMaxLength(50);

                entity.Property(e => e.Description).HasMaxLength(4000);

                entity.Property(e => e.LastModificationTime).HasColumnType("datetime");

                entity.Property(e => e.LastModifierId).HasMaxLength(50);

                entity.Property(e => e.LogDate).HasColumnType("datetime");

                entity.Property(e => e.Name).HasMaxLength(1000);
            });

            modelBuilder.Entity<Staff>(entity =>
            {
                entity.Property(e => e.Id).HasMaxLength(50);

                entity.Property(e => e.Address).HasMaxLength(200);

                entity.Property(e => e.Alias).HasMaxLength(50);

                entity.Property(e => e.BirthDay).HasColumnType("datetime");

                entity.Property(e => e.BranchId).HasMaxLength(50);

                entity.Property(e => e.CityId).HasMaxLength(50);

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.CompanyId).HasMaxLength(50);

                entity.Property(e => e.CountryId).HasMaxLength(50);

                entity.Property(e => e.CreationTime).HasColumnType("datetime");

                entity.Property(e => e.CreatorId).HasMaxLength(50);

                entity.Property(e => e.DepartmentId).HasMaxLength(50);

                entity.Property(e => e.Description).HasMaxLength(4000);

                entity.Property(e => e.DistrictId).HasMaxLength(50);

                entity.Property(e => e.Email).HasMaxLength(100);

                entity.Property(e => e.Employeetype).HasMaxLength(50);

                entity.Property(e => e.Fax).HasMaxLength(100);

                entity.Property(e => e.FristName).HasMaxLength(50);

                entity.Property(e => e.FullName).HasMaxLength(100);

                entity.Property(e => e.JobTitle).HasMaxLength(50);

                entity.Property(e => e.KeyActiveEmail).HasMaxLength(100);

                entity.Property(e => e.KeyPassword).HasMaxLength(100);

                entity.Property(e => e.LastModificationTime).HasColumnType("datetime");

                entity.Property(e => e.LastModifierId).HasMaxLength(50);

                entity.Property(e => e.LastName).HasMaxLength(50);

                entity.Property(e => e.LogDate).HasColumnType("datetime");

                entity.Property(e => e.ManagerId).HasMaxLength(50);

                entity.Property(e => e.Mobile).HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.Password).HasMaxLength(200);

                entity.Property(e => e.PersonalTaxId).HasMaxLength(200);

                entity.Property(e => e.Phone).HasMaxLength(100);

                entity.Property(e => e.PositionTitle).HasMaxLength(50);

                entity.Property(e => e.Sex).HasColumnName("sex");

                entity.Property(e => e.TeamId).HasMaxLength(50);

                entity.Property(e => e.Tel1)
                    .HasMaxLength(50)
                    .HasColumnName("Tel_1");

                entity.Property(e => e.Tel2)
                    .HasMaxLength(50)
                    .HasColumnName("Tel_2");

                entity.Property(e => e.Username).HasMaxLength(100);
            });

            modelBuilder.Entity<StaffAccountMapping>(entity =>
            {
                entity.HasKey(e => new { e.StaffId, e.AccountId });

                entity.Property(e => e.StaffId).HasMaxLength(50);

                entity.Property(e => e.AccountId).HasMaxLength(50);
            });

            modelBuilder.Entity<StaffSkill>(entity =>
            {
                entity.Property(e => e.Id).HasMaxLength(50);

                entity.Property(e => e.CreationTime).HasColumnType("datetime");

                entity.Property(e => e.CreatorId).HasMaxLength(50);

                entity.Property(e => e.LastModificationTime).HasColumnType("datetime");

                entity.Property(e => e.LastModifierId).HasMaxLength(50);

                entity.Property(e => e.LogDate).HasColumnType("datetime");

                entity.Property(e => e.SkillId).HasMaxLength(50);

                entity.Property(e => e.StaffId).HasMaxLength(50);
            });

            modelBuilder.Entity<Stage>(entity =>
            {
                entity.Property(e => e.Id).HasMaxLength(50);

                entity.Property(e => e.Code).HasMaxLength(100);

                entity.Property(e => e.CompanyId)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreationTime).HasColumnType("datetime");

                entity.Property(e => e.CreatorId).HasMaxLength(50);

                entity.Property(e => e.LastModificationTime).HasColumnType("datetime");

                entity.Property(e => e.LogDate).HasColumnType("datetime");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.StageNameEn).HasMaxLength(100);
            });

            modelBuilder.Entity<SwitchingUnit>(entity =>
            {
                entity.Property(e => e.Id).HasMaxLength(50);

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.CreationTime).HasColumnType("datetime");

                entity.Property(e => e.CreatorId).HasMaxLength(50);

                entity.Property(e => e.Description).HasMaxLength(4000);

                entity.Property(e => e.LastModificationTime).HasColumnType("datetime");

                entity.Property(e => e.LastModifierId).HasMaxLength(50);

                entity.Property(e => e.LogDate).HasColumnType("datetime");

                entity.Property(e => e.Name).HasMaxLength(200);

                entity.Property(e => e.UnitId).HasMaxLength(50);

                entity.Property(e => e.UnitParentId).HasMaxLength(50);
            });

            modelBuilder.Entity<TypeDevice>(entity =>
            {
                entity.Property(e => e.Id).HasMaxLength(50);

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.CompanyId).HasMaxLength(50);

                entity.Property(e => e.CreationTime).HasColumnType("datetime");

                entity.Property(e => e.CreatorId).HasMaxLength(50);

                entity.Property(e => e.Description).HasMaxLength(4000);

                entity.Property(e => e.LastModicationTime).HasColumnType("datetime");

                entity.Property(e => e.LastModifierId).HasMaxLength(50);

                entity.Property(e => e.LogDate).HasColumnType("datetime");

                entity.Property(e => e.Name).HasMaxLength(100);
            });

            modelBuilder.Entity<UserGroup>(entity =>
            {
                entity.Property(e => e.UserGroupId).HasMaxLength(50);

                entity.Property(e => e.UserGroupName).HasMaxLength(100);
            });

            modelBuilder.Entity<WardModel>(entity =>
            {
                entity.HasKey(e => e.WardId);

                entity.Property(e => e.WardId).ValueGeneratedNever();

                entity.Property(e => e.Appellation).HasMaxLength(20);

                entity.Property(e => e.WardCode).HasMaxLength(50);

                entity.Property(e => e.WardName).HasMaxLength(200);

                entity.HasOne(d => d.District)
                    .WithMany(p => p.WardModel)
                    .HasForeignKey(d => d.DistrictId)
                    .HasConstraintName("FK_WardModel_DistrictModel");
            });

            modelBuilder.Entity<WorkShop>(entity =>
            {
                entity.Property(e => e.Id).HasMaxLength(50);

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.CompanyId)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreationTime).HasColumnType("datetime");

                entity.Property(e => e.CreatorId).HasMaxLength(50);

                entity.Property(e => e.LastModificationTime).HasColumnType("datetime");

                entity.Property(e => e.LastModifierId).HasMaxLength(50);

                entity.Property(e => e.LogDate).HasColumnType("datetime");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.PlantId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.WorkShopNameEn).HasMaxLength(100);
            });

            modelBuilder.Entity<WorkshopUserMapping>(entity =>
            {
                entity.HasKey(e => new { e.WorkShopId, e.StaffId });

                entity.Property(e => e.WorkShopId).HasMaxLength(50);

                entity.Property(e => e.StaffId).HasMaxLength(50);

                entity.Property(e => e.ModuleId).HasMaxLength(50);
            });

            OnModelCreatingGeneratedProcedures(modelBuilder);
            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}